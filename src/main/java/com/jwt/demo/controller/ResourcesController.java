package com.jwt.demo.controller;
import com.jwt.demo.entities.request.CTStatusMessage;
import com.jwt.demo.entities.request.RequestToPayMessage;
import com.jwt.demo.entities.response.CTStatusMessageResponse;
import com.jwt.demo.exceptions.types.*;
import com.jwt.demo.utilities.Utility;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/ips")
public class ResourcesController extends Utility {

    private final Logger log = LoggerFactory.getLogger(ResourcesController.class);


    @PostMapping("/chekCTStatus")
    @ApiImplicitParam(name = "Authorization", value = "Session token generated by server. Must be sent in authorization section of request headers. Contains keyword 'Bearer' and space after it. Example: Token eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhYWUzNzk5YTgyYjlmYjhjY2QzTlhODJU2NWIyIn0.kFuqjYNjrmgEWD-jf8iFlVCdknB-mBC6rV6Wg", required = true, allowEmptyValue = false, paramType = "header", dataType = "String")
    public ResponseEntity<CTStatusMessageResponse> checkCTstatus(@RequestBody CTStatusMessage ctStatusMessage) throws CTStatusMessageTIDNullException, CTStatusMessageEndNodeIndicatorNullException, CTStatusMessageCreditTransferIdentificatorNullException, CTStatusMessageCreditTransferAmountNullException {
        log.warn(LOGGING_PATTERN + getLineNumber() + " Entered checkCTstatus method ");
        log.warn(LOGGING_PATTERN + getLineNumber() + " Credit transfer amount  : " + ctStatusMessage.getCreditTransferAmount());
        log.warn(LOGGING_PATTERN + getLineNumber() + " Credit transfer userId : " + ctStatusMessage.getCreditTransferIdentificator());
        log.warn(LOGGING_PATTERN + getLineNumber() + " End to end ID : " + ctStatusMessage.getEndNodeIndicator());
        log.warn(LOGGING_PATTERN + getLineNumber() + " Terminal ID : " + ctStatusMessage.getTerminalIdentificator());
        if(ctStatusMessage.getTerminalIdentificator()==null)
        {
          throw new CTStatusMessageTIDNullException("tid cannot be null!");
        }
        if(ctStatusMessage.getEndNodeIndicator()==null)
        {
            throw new CTStatusMessageEndNodeIndicatorNullException("end node identificator cannot be null!");
        }
        if(ctStatusMessage.getCreditTransferIdentificator()==null)
        {
            throw new CTStatusMessageCreditTransferIdentificatorNullException("credit transfer indicator cannot be null!");
        }
        if(ctStatusMessage.getCreditTransferAmount()==null)
        {
            throw new CTStatusMessageCreditTransferAmountNullException("credit transfer amount cannot be null!");
        }
        if(ctStatusMessage.getTerminalIdentificator().trim().equalsIgnoreCase(""))
        {
            throw new CTStatusMessageTIDNullException("tid cannot be empty!");
        }
        if(ctStatusMessage.getEndNodeIndicator().trim().equalsIgnoreCase(""))
        {
            throw new CTStatusMessageEndNodeIndicatorNullException("end node identificator cannot be empty!");
        }
        if(ctStatusMessage.getCreditTransferIdentificator().trim().equalsIgnoreCase(""))
        {
            throw new CTStatusMessageCreditTransferIdentificatorNullException("credit transfer indicator cannot be empty!");
        }
        if(ctStatusMessage.getCreditTransferAmount().trim().equalsIgnoreCase(""))
        {
            throw new CTStatusMessageCreditTransferAmountNullException("credit transfer amount cannot be empty!");
        }
        CTStatusMessageResponse ctStatusMessageResponse = new CTStatusMessageResponse();
        ctStatusMessageResponse.setApprovalCode("2004");
        ctStatusMessageResponse.setCreditTransferIdentificator("123456789012345");
        ctStatusMessageResponse.setStatusCode("00");
        ctStatusMessageResponse.setTerminalIdentificator("KCE00001");
        log.warn(LOGGING_PATTERN + getLineNumber() + " Logging object send as response " + ctStatusMessageResponse);
        return new ResponseEntity<>(ctStatusMessageResponse, HttpStatus.OK);
    }

    @PostMapping("/paymentReturn")
    @ApiImplicitParam(name = "Authorization", value = "Session token generated by server. Must be sent in authorization section of request headers. Contains keyword 'Bearer' and space after it. Example: Token eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhYWUzNzk5YTgyYjlmYjhjY2QzTlhODJU2NWIyIn0.kFuqjYNjrmgEWD-jf8iFlVCdknB-mBC6rV6Wg", required = true, allowEmptyValue = false, paramType = "header", dataType = "String")
    public ResponseEntity<CTStatusMessageResponse> paymentReturn(@RequestBody CTStatusMessage ctStatusMessage) throws CTStatusMessageEndNodeIndicatorNullException, CTStatusMessageCreditTransferIdentificatorNullException, CTStatusMessageCreditTransferAmountNullException, CTStatusMessageTIDNullException {
        log.warn(LOGGING_PATTERN + getLineNumber() + " Entered paymentReturn method ");
        log.warn(LOGGING_PATTERN + getLineNumber() + " Credit transfer amount  : " + ctStatusMessage.getCreditTransferAmount());
        log.warn(LOGGING_PATTERN + getLineNumber() + " Credit transfer userId : " + ctStatusMessage.getCreditTransferIdentificator());
        log.warn(LOGGING_PATTERN + getLineNumber() + " End to end ID : " + ctStatusMessage.getEndNodeIndicator());
        log.warn(LOGGING_PATTERN + getLineNumber() + " Terminal ID : " + ctStatusMessage.getTerminalIdentificator());
        if(ctStatusMessage.getTerminalIdentificator()==null)
        {
            throw new CTStatusMessageTIDNullException("tid cannot be null!");
        }
        if(ctStatusMessage.getCreditTransferIdentificator()==null)
        {
            throw new CTStatusMessageCreditTransferIdentificatorNullException("credit transfer indicator cannot be null!");
        }
        if(ctStatusMessage.getCreditTransferAmount()==null)
        {
            throw new CTStatusMessageCreditTransferAmountNullException("credit transfer amount cannot be null!");
        }
        if(ctStatusMessage.getTerminalIdentificator().trim().equalsIgnoreCase(""))
        {
            throw new CTStatusMessageTIDNullException("tid cannot be empty!");
        }

        if(ctStatusMessage.getCreditTransferIdentificator().trim().equalsIgnoreCase(""))
        {
            throw new CTStatusMessageCreditTransferIdentificatorNullException("credit transfer indicator cannot be empty!");
        }
        if(ctStatusMessage.getCreditTransferAmount().trim().equalsIgnoreCase(""))
        {
            throw new CTStatusMessageCreditTransferAmountNullException("credit transfer amount cannot be empty!");
        }
        CTStatusMessageResponse ctStatusMessageResponse = new CTStatusMessageResponse();
        ctStatusMessageResponse.setApprovalCode("2222");
        ctStatusMessageResponse.setCreditTransferIdentificator("7787998");
        ctStatusMessageResponse.setStatusCode("00");
        ctStatusMessageResponse.setTerminalIdentificator("KCE00001");
        log.warn(LOGGING_PATTERN + getLineNumber() + " Logging object send as response " + ctStatusMessageResponse);
        return new ResponseEntity<>(ctStatusMessageResponse, HttpStatus.OK);
    }

    @PostMapping("/requestToPay")
    @ApiImplicitParam(name = "Authorization", value = "Session token generated by server. Must be sent in authorization section of request headers. Contains keyword 'Bearer' and space after it. Example: Token eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhYWUzNzk5YTgyYjlmYjhjY2QzTlhODJU2NWIyIn0.kFuqjYNjrmgEWD-jf8iFlVCdknB-mBC6rV6Wg", required = true, allowEmptyValue = false, paramType = "header", dataType = "String")
    public ResponseEntity<CTStatusMessageResponse> paymentReturn(@RequestBody RequestToPayMessage requestToPayMessage) throws RequestToPayNullPointerException {
        log.warn(LOGGING_PATTERN + getLineNumber() + " Entered paymentReturn method ");
        log.warn(LOGGING_PATTERN + getLineNumber() + " Credit transfer amount  : " + requestToPayMessage.getCreditTransferAmount());
        log.warn(LOGGING_PATTERN + getLineNumber() + " Credit card transfer id : " + requestToPayMessage.getCreditTransferIdentificator());
        log.warn(LOGGING_PATTERN + getLineNumber() + " Debtor reference : " + requestToPayMessage.getDebtorReference());
        log.warn(LOGGING_PATTERN + getLineNumber() + " One time code : " + requestToPayMessage.getOneTimeCode());
        log.warn(LOGGING_PATTERN + getLineNumber() + " Terminal id : " + requestToPayMessage.getTerminalIdentificator());

        if(requestToPayMessage.getCreditTransferIdentificator()==null)
        {
            throw new RequestToPayNullPointerException("Credit transfer indicator cannot be null!");

        }
        if(requestToPayMessage.getTerminalIdentificator()==null)
        {
            throw new RequestToPayNullPointerException("Terminal identificator cannot be null!");

        }
        if(requestToPayMessage.getCreditTransferAmount()==null)
        {
            throw new RequestToPayNullPointerException("Credit transfer amount cannot be null!");
        }
        if(requestToPayMessage.getCreditTransferAmountCurrency()==null)
        {
            throw new RequestToPayNullPointerException("Credit transfer amount currency cannot be null!");

        }
        if(requestToPayMessage.getDebtorAccountNumber()==null)
        {
            throw new RequestToPayNullPointerException("Debtor account number cannot be null!");
        }
        if(requestToPayMessage.getOneTimeCode()==null)
        {
            throw new RequestToPayNullPointerException("One time code cannot be null!");
        }
        if(requestToPayMessage.getDebtorReference()==null)
        {
            throw new RequestToPayNullPointerException("Debtor reference cannot be null!");
        }
        if(requestToPayMessage.getDebtorName()==null)
        {
            throw new RequestToPayNullPointerException("Debtor name cannot be null!");

        }
        if(requestToPayMessage.getDebtorAddress()==null)
        {
            throw new RequestToPayNullPointerException("Debtor address cannot be null!");

        }
        if(requestToPayMessage.getPaymentPurpose()==null)
        {
            throw new RequestToPayNullPointerException("Payment purpose cannot be null!");

        }
        CTStatusMessageResponse ctStatusMessageResponse = new CTStatusMessageResponse();
        ctStatusMessageResponse.setApprovalCode("1234");
        ctStatusMessageResponse.setCreditTransferIdentificator("5668999321");
        ctStatusMessageResponse.setStatusCode("00");
        ctStatusMessageResponse.setTerminalIdentificator("KCE00001");
        log.warn(LOGGING_PATTERN + getLineNumber() + " Logging object sent as response : " + requestToPayMessage);
        return new ResponseEntity<>(ctStatusMessageResponse, HttpStatus.OK);
    }


}